set(LIB_NAME Common)

SET(SAMPLE_COMMON_LIB_OUTPUT_DIR ${TORCH_PROJECT_DIR}/Samples/lib/${TORCH_PLATFORM_NAME})

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${SAMPLE_COMMON_LIB_OUTPUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${SAMPLE_COMMON_LIB_OUTPUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${SAMPLE_COMMON_LIB_OUTPUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${SAMPLE_COMMON_LIB_OUTPUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${SAMPLE_COMMON_LIB_OUTPUT_DIR})

if(TORCH_PLATFORM_IOS)
else()
    set(SOURCE_FILES ${TORCH_PROJECT_DIR}/Samples/Src/Common/Common.cpp)
endif()

set(HEADER_FILES ${TORCH_PROJECT_DIR}/Samples/Src/Common/Common.hpp)

source_group("Source_Files" FILES ${SOURCE_FILES})
source_group("Header Files" FIlES ${HEADER_FILES})

add_library(${LIB_NAME} STATIC ${SOURCE_FILES} ${HEADER_FILES})

target_compile_definitions(${LIB_NAME} PRIVATE -DCOMMON_SOURCE)

target_include_directories(${LIB_NAME} PUBLIC ${TORCH_PROJECT_DIR}/Samples/Src/Common)

set(LIB_OUTPUT_NAME ${LIB_NAME}${TORCH_OUTPUT_SUFFIX})

set_target_properties(${LIB_NAME} PROPERTIES PROJECT_LABEL ${LIB_NAME} OUTPUT_NAME ${LIB_OUTPUT_NAME} FOLDER "Torch/Samples")

target_link_libraries(${LIB_NAME} PUBLIC ${TORCH_CORELIB_NAME})

add_dependencies(${LIB_NAME} Engine)